/*
 * Copyright (c) 2004: The Trustees of Columbia University in the City of New York. All Rights Reserved.
 *  
 */
package psl.crunch3.plugins.contentextractor;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.ShellAdapter;
import org.eclipse.swt.events.ShellEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Sash;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.ToolBar;

import psl.crunch3.ButtonGroup;
import psl.crunch3.Crunch3;
import psl.crunch3.TextDoubleListener;
import psl.crunch3.TextIntegerListener;
import psl.crunch3.plugins.ProxyFilterSettings;

/**
 * SettingsEditor.java
 * 
 * @author Suhit Gupta (suhit@cs.columbia.edu)
 */
public class SettingsEditor implements ProxyFilterSettings {
	protected static SettingsEditor self;

	private static final int INDENT = 10;

	//instance variables
	ContentExtractorSettings mFilter;

	public static SettingsEditor getInstance() {
		if (self == null)
			self = new SettingsEditor();
		return self;
	}

	/**
	 * Creates new form SettingsEditor
	 */
	private SettingsEditor() {
		initComponents();
		mFilter = ContentExtractorSettings.getInstance();
		loadSettings();
		mainShell.pack();
		mainShell.setBounds(
			Crunch3.mainWindow.getShell().getBounds().x + Crunch3.mainWindow.getShell().getBounds().width / 2 - mainShell.getBounds().width / 2,
			Crunch3.mainWindow.getShell().getBounds().y + Crunch3.mainWindow.getShell().getBounds().height / 2 - mainShell.getBounds().height / 2,
			mainShell.getBounds().width,
			mainShell.getBounds().height);
		mainShell.open();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() { //GEN-BEGIN:initComponents
		// init visuals
		mainShell = new Shell(Crunch3.mainWindow.getShell(), SWT.DIALOG_TRIM);
		settingsTabs = new TabFolder(mainShell, SWT.NULL);

		ignoreTabItem = new TabItem(settingsTabs, SWT.NULL);
		ignorePanel = new Composite(settingsTabs, SWT.NULL);
		ignoreAdsCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreScriptsCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreNoscriptCheck = new Button(ignorePanel, SWT.CHECK);
		cssGroup = new Group(ignorePanel, SWT.NULL);
		ignoreExternalStylesheetsCheck = new Button(cssGroup, SWT.CHECK);
		ignoreStylesCheck = new Button(cssGroup, SWT.CHECK);
		ignoreStyleAttributesCheck = new Button(cssGroup, SWT.CHECK);
		ignoreStyleInDivCheck = new Button(cssGroup, SWT.CHECK);
		ignoreImagesCheck = new Button(ignorePanel, SWT.CHECK);
		displayAltTagsCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreImageLinksCheck = new Button(ignorePanel, SWT.CHECK);
		displayImageLinkAltsCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreTextLinksCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreFormsCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreInputCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreButtonCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreSelectCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreMetaCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreIframeCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreTableCellWidthsCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreEmbedCheck = new Button(ignorePanel, SWT.CHECK);
		ignoreFlashCheck = new Button(ignorePanel, SWT.CHECK);

		advancedTabItem = new TabItem(settingsTabs, SWT.NONE);
		advancedPanel = new Composite(settingsTabs, SWT.NONE);
		ignoreLinkListsCheck = new Button(advancedPanel, SWT.CHECK);
		ignoreLLTextLinksCheck = new Button(advancedPanel, SWT.CHECK);
		ignoreLLImageLinksCheck = new Button(advancedPanel, SWT.CHECK);
		ignoreOnlyTextAndLinksCheck = new Button(advancedPanel, SWT.CHECK);
		linkTextRatioLabel = new Label(advancedPanel, SWT.NONE);
		linkTextRatio = new Text(advancedPanel, SWT.BORDER);
		jSeparator1 = new Sash(advancedPanel, SWT.BORDER);
		removeEmptyTablesCheck = new Button(advancedPanel, SWT.CHECK);
		substanceLabel = new Label(advancedPanel, SWT.CHECK);
		substanceImageCheck = new Button(advancedPanel, SWT.CHECK);
		substanceTextareaCheck = new Button(advancedPanel, SWT.CHECK);
		substanceLinksCheck = new Button(advancedPanel, SWT.CHECK);
		substanceButtonCheck = new Button(advancedPanel, SWT.CHECK);
		substanceInputCheck = new Button(advancedPanel, SWT.CHECK);
		substanceFormCheck = new Button(advancedPanel, SWT.CHECK);
		substanceSelectCheck = new Button(advancedPanel, SWT.CHECK);
		substanceIFrameCheck = new Button(advancedPanel, SWT.CHECK);
		minimumTextLengthLabel = new Label(advancedPanel, SWT.NONE);
		minimumTextLengthField = new Text(advancedPanel, SWT.BORDER);

		outputTabItem = new TabItem(settingsTabs, SWT.NONE);
		outputPanel = new Composite(settingsTabs, SWT.NONE);
		outputFormatPanel = new Group(outputPanel, SWT.NONE);
		htmlOutputButton = new Button(outputFormatPanel, SWT.RADIO);
		textOutputButton = new Button(outputFormatPanel, SWT.RADIO);
		htmlOutputPanel = new Group(outputPanel, SWT.NONE);
		appendLinksCheck = new Button(htmlOutputPanel, SWT.CHECK);
		textOutputPanel = new Group(outputPanel, SWT.NONE);
		limitLineBreaksCheck = new Button(textOutputPanel, SWT.CHECK);
		maxLineBreaksLabel = new Label(textOutputPanel, SWT.NONE);
		maxLineBreaksField = new Text(textOutputPanel, SWT.BORDER);

		toolBar = new ToolBar(mainShell, SWT.NONE);
		commitButton = new Button(toolBar, SWT.NONE);
		revertButton = new Button(toolBar, SWT.NONE);
		okButton = new Button(toolBar, SWT.NONE);
		cancelButton = new Button(toolBar, SWT.NONE);

		// init non visuals
		GridData settingsTabsGridData = new GridData();

		buttonGroupOutput = new ButtonGroup();
		GridLayout ignoreSettingsGridLayout = new GridLayout();
		GridData ignoreAdsCheckGridData = new GridData();
		GridData ignoreScriptsCheckGridData = new GridData();
		GridData ignoreNoscriptCheckGridData = new GridData();
		GridData cssGroupGridData = new GridData();
		GridLayout cssGroupGridLayout = new GridLayout();
		GridData ignoreExternalStylesheetsCheckGridData = new GridData();
		GridData ignoreStylesCheckGridData = new GridData();
		GridData ignoreStyleAttributesCheckGridData = new GridData();
		GridData ignoreStyleInDivCheckGridData = new GridData();
		GridData ignoreImagesCheckGridData = new GridData();
		GridData displayAltTagsCheckGridData = new GridData();
		GridData ignoreImageLinksCheckGridData = new GridData();
		GridData displayImageLinkAltsCheckGridData = new GridData();
		GridData ignoreTextLinksCheckGridData = new GridData();
		GridData ignoreFormsCheckGridData = new GridData();
		GridData ignoreInputCheckGridData = new GridData();
		GridData ignoreButtonCheckGridData = new GridData();
		GridData ignoreSelectCheckGridData = new GridData();
		GridData ignoreMetaCheckGridData = new GridData();
		GridData ignoreIframeCheckGridData = new GridData();
		GridData ignoreTableCellWidthsCheckGridData = new GridData();
		GridData ignoreEmbedCheckGridData = new GridData();
		GridData ignoreFlashCheckGridData = new GridData();

		GridLayout advancedPanelGridLayout = new GridLayout();
		GridData ignoreLinkListsCheckGridData = new GridData();
		GridData ignoreLLTextLinksCheckGridData = new GridData();
		GridData ignoreLLImageLinksCheckGridData = new GridData();
		GridData ignoreOnlyTextAndLinksCheckGridData = new GridData();
		GridData linkTextRatioLabelGridData = new GridData();
		GridData linkTextRatioGridData = new GridData();
		GridData jSeparator1GridData = new GridData();
		GridData removeEmptyTablesCheckGridData = new GridData();
		GridData substanceLabelGridData = new GridData();
		GridData substanceImageCheckGridData = new GridData();
		GridData substanceTextareaCheckGridData = new GridData();
		GridData substanceLinksCheckGridData = new GridData();
		GridData substanceButtonCheckGridData = new GridData();
		GridData substanceInputCheckGridData = new GridData();
		GridData substanceFormCheckGridData = new GridData();
		GridData substanceSelectCheckGridData = new GridData();
		GridData substanceIFrameCheckGridData = new GridData();
		GridData minimumTextLengthLabelGridData = new GridData();
		GridData minimumTextLengthFieldGridData = new GridData();

		GridLayout outputPanelGridLayout = new GridLayout();
		GridData outputFormatPanelGridData = new GridData();
		GridLayout outputFormatPanelGridLayout = new GridLayout();
		GridData htmlOutputButtonGridData = new GridData();
		GridData textOutputButtonGridData = new GridData();
		GridData htmlOutputPanelGridData = new GridData();
		GridLayout htmlOutputPanelGridLayout = new GridLayout();
		GridData appendLinksCheckGridData = new GridData();
		GridData textOutputPanelGridData = new GridData();
		GridLayout textOutputPanelGridLayout = new GridLayout();
		GridData limitLineBreaksCheckGridData = new GridData();
		GridData maxLineBreaksLabelGridData = new GridData();
		GridData maxLineBreaksFieldGridData = new GridData();

		GridData toolBarGridData = new GridData();
		GridLayout toolBarGridLayout = new GridLayout();
		GridData commitButtonGridData = new GridData();
		GridData revertButtonGridData = new GridData();
		GridData okButtonGridData = new GridData();
		GridData cancelButtonGridData = new GridData();

		// init fields
		settingsTabsGridData.grabExcessHorizontalSpace = true;
		settingsTabsGridData.grabExcessVerticalSpace = true;
		settingsTabsGridData.horizontalAlignment = GridData.FILL;
		settingsTabsGridData.verticalAlignment = GridData.FILL;

		ignoreSettingsGridLayout.numColumns = 2;
		ignoreAdsCheckGridData.horizontalSpan = 2;
		ignoreScriptsCheckGridData.horizontalSpan = 2;
		ignoreNoscriptCheckGridData.horizontalIndent = INDENT;
		ignoreNoscriptCheckGridData.horizontalSpan = 2;
		cssGroupGridData.horizontalSpan = 2;
		cssGroupGridData.grabExcessHorizontalSpace = true;
		cssGroupGridData.horizontalAlignment = GridData.FILL;
		cssGroupGridLayout.numColumns = 1;
		ignoreExternalStylesheetsCheckGridData.horizontalSpan = 1;
		ignoreStylesCheckGridData.horizontalSpan = 1;
		ignoreStyleAttributesCheckGridData.horizontalSpan = 1;
		ignoreStyleInDivCheckGridData.horizontalSpan = 1;
		ignoreImagesCheckGridData.horizontalSpan = 2;
		displayAltTagsCheckGridData.horizontalIndent = INDENT;
		displayAltTagsCheckGridData.horizontalSpan = 2;
		ignoreImageLinksCheckGridData.horizontalSpan = 2;
		displayImageLinkAltsCheckGridData.horizontalIndent = INDENT;
		displayImageLinkAltsCheckGridData.horizontalSpan = 2;
		ignoreTextLinksCheckGridData.horizontalSpan = 2;
		ignoreFormsCheckGridData.horizontalSpan = 1;
		ignoreInputCheckGridData.horizontalSpan = 1;
		ignoreButtonCheckGridData.horizontalSpan = 1;
		ignoreSelectCheckGridData.horizontalSpan = 1;
		ignoreMetaCheckGridData.horizontalSpan = 1;
		ignoreIframeCheckGridData.horizontalSpan = 1;
		ignoreTableCellWidthsCheckGridData.horizontalSpan = 1;
		ignoreEmbedCheckGridData.horizontalSpan = 1;
		ignoreFlashCheckGridData.horizontalSpan = 1;

		advancedPanelGridLayout.numColumns = 2;
		ignoreLinkListsCheckGridData.horizontalSpan = 2;
		ignoreLLTextLinksCheckGridData.horizontalIndent = 10;
		ignoreLLTextLinksCheckGridData.horizontalSpan = 2;
		ignoreLLImageLinksCheckGridData.horizontalIndent = 10;
		ignoreLLImageLinksCheckGridData.horizontalSpan = 2;
		ignoreOnlyTextAndLinksCheckGridData.horizontalIndent = 10;
		ignoreOnlyTextAndLinksCheckGridData.horizontalSpan = 2;
		linkTextRatioLabelGridData.horizontalIndent = 10;
		linkTextRatioLabelGridData.horizontalSpan = 1;
		linkTextRatioGridData.horizontalAlignment = GridData.FILL;
		linkTextRatioGridData.horizontalSpan = 1;
		jSeparator1GridData.grabExcessHorizontalSpace = true;
		jSeparator1GridData.heightHint = 0;
		jSeparator1GridData.horizontalAlignment = GridData.FILL;
		jSeparator1GridData.horizontalSpan = 2;
		removeEmptyTablesCheckGridData.horizontalSpan = 2;
		substanceLabelGridData.horizontalIndent = 10;
		substanceLabelGridData.horizontalSpan = 2;
		substanceImageCheckGridData.horizontalIndent = 10;
		substanceImageCheckGridData.horizontalSpan = 1;
		substanceTextareaCheckGridData.horizontalSpan = 1;
		substanceLinksCheckGridData.horizontalIndent = 10;
		substanceLinksCheckGridData.horizontalSpan = 1;
		substanceButtonCheckGridData.horizontalSpan = 1;
		substanceInputCheckGridData.horizontalIndent = 10;
		substanceInputCheckGridData.horizontalSpan = 1;
		substanceFormCheckGridData.horizontalSpan = 1;
		substanceSelectCheckGridData.horizontalIndent = 10;
		substanceSelectCheckGridData.horizontalSpan = 1;
		substanceIFrameCheckGridData.horizontalSpan = 1;
		minimumTextLengthLabelGridData.horizontalIndent = 10;
		minimumTextLengthLabelGridData.horizontalSpan = 1;
		minimumTextLengthFieldGridData.horizontalAlignment = GridData.FILL;
		minimumTextLengthFieldGridData.horizontalSpan = 1;

		outputPanelGridLayout.numColumns = 1;
		outputFormatPanelGridData.grabExcessHorizontalSpace = true;
		outputFormatPanelGridData.horizontalAlignment = GridData.FILL;
		outputFormatPanelGridLayout.numColumns = 1;
		htmlOutputButtonGridData.horizontalAlignment = GridData.CENTER;
		textOutputButtonGridData.horizontalAlignment = GridData.CENTER;
		htmlOutputPanelGridData.grabExcessHorizontalSpace = true;
		htmlOutputPanelGridData.horizontalAlignment = GridData.FILL;
		htmlOutputPanelGridLayout.numColumns = 1;
		appendLinksCheckGridData.horizontalSpan = 1;
		textOutputPanelGridData.grabExcessHorizontalSpace = true;
		textOutputPanelGridData.grabExcessVerticalSpace = true;
		textOutputPanelGridData.horizontalAlignment = GridData.FILL;
		textOutputPanelGridData.verticalAlignment = GridData.FILL;
		textOutputPanelGridLayout.numColumns = 2;
		limitLineBreaksCheckGridData.horizontalSpan = 2;
		maxLineBreaksLabelGridData.horizontalSpan = 1;
		maxLineBreaksFieldGridData.grabExcessHorizontalSpace = true;
		maxLineBreaksFieldGridData.horizontalAlignment = GridData.FILL;
		maxLineBreaksFieldGridData.horizontalSpan = 1;

		toolBarGridData.grabExcessHorizontalSpace = true;
		toolBarGridData.horizontalAlignment = GridData.FILL;
		toolBarGridLayout.numColumns = 4;
		commitButtonGridData.horizontalAlignment = GridData.BEGINNING;
		revertButtonGridData.horizontalAlignment = GridData.BEGINNING;
		revertButtonGridData.grabExcessHorizontalSpace = true;
		okButtonGridData.horizontalAlignment = GridData.END;
		cancelButtonGridData.horizontalAlignment = GridData.END;

		// set properties
		mainShell.setImage(Crunch3.mainWindow.crunchIcon);
		mainShell.setText("Crunch 2.0: Content Extractor Settings");
		mainShell.setDefaultButton(okButton);
		settingsTabs.setLayoutData(settingsTabsGridData);

		ignoreTabItem.setText("&Ignore Settings");
		ignoreTabItem.setControl(ignorePanel);
		ignorePanel.setLayout(ignoreSettingsGridLayout);
		ignoreAdsCheck.setLayoutData(ignoreAdsCheckGridData);
		ignoreAdsCheck.setText("Ignore All Advertisements");
		ignoreAdsCheck.setToolTipText("Remove tags containing links to or images from known ad servers.");
		ignoreAdsCheck.setAlignment(SWT.LEFT);
		ignoreScriptsCheck.setLayoutData(ignoreScriptsCheckGridData);
		ignoreScriptsCheck.setText("Ignore Scripts");
		ignoreScriptsCheck.setToolTipText("Remove SCRIPT tags.");
		ignoreNoscriptCheck.setLayoutData(ignoreNoscriptCheckGridData);
		ignoreNoscriptCheck.setText("Ignore <NOSCRIPT> tags");
		ignoreNoscriptCheck.setToolTipText("Will not preserve information inside NOSCRIPT tags if checked.");
		ignoreNoscriptCheck.setEnabled(false);
		cssGroup.setLayout(cssGroupGridLayout);
		cssGroup.setLayoutData(cssGroupGridData);
		cssGroup.setText("CSS Settings");
		ignoreExternalStylesheetsCheck.setLayoutData(ignoreExternalStylesheetsCheckGridData);
		ignoreExternalStylesheetsCheck.setText("Ignore External Stylesheets");
		ignoreExternalStylesheetsCheck.setToolTipText("Removes <LINK> tags related to external CSS files.");
		ignoreStylesCheck.setLayoutData(ignoreStylesCheckGridData);
		ignoreStylesCheck.setText("Ignore Styles");
		ignoreStylesCheck.setToolTipText("Removes <STYLE> tags from documents.");
		ignoreStyleAttributesCheck.setLayoutData(ignoreStyleAttributesCheckGridData);
		ignoreStyleAttributesCheck.setText("Ignore Style Attribute in ALL tags");
		ignoreStyleAttributesCheck.setToolTipText("Removes style attributes from all the tags in a document.");
		ignoreStyleInDivCheck.setLayoutData(ignoreStyleInDivCheckGridData);
		ignoreStyleInDivCheck.setText("Ignore Style Attribute in <DIV> tags");
		ignoreImagesCheck.setLayoutData(ignoreImagesCheckGridData);
		ignoreImagesCheck.setText("Ignore Non-Link Images");
		ignoreImagesCheck.setToolTipText("Removes Images that are not links.");
		displayAltTagsCheck.setLayoutData(displayAltTagsCheckGridData);
		displayAltTagsCheck.setText("Display ALT Text");
		displayAltTagsCheck.setToolTipText("Replaces the removed images with their alt text inside brackets.");
		displayAltTagsCheck.setEnabled(false);
		ignoreImageLinksCheck.setLayoutData(ignoreImageLinksCheckGridData);
		ignoreImageLinksCheck.setText("Ignore Image Links");
		ignoreImageLinksCheck.setToolTipText("Removes Images that are links.");
		displayImageLinkAltsCheck.setLayoutData(displayImageLinkAltsCheckGridData);
		displayImageLinkAltsCheck.setText("Display ALT Links");
		displayImageLinkAltsCheck.setToolTipText("Replaces removed image links with links containing their alt text.");
		displayImageLinkAltsCheck.setEnabled(false);
		ignoreTextLinksCheck.setLayoutData(ignoreTextLinksCheckGridData);
		ignoreTextLinksCheck.setText("Ignore Text Links");
		ignoreTextLinksCheck.setToolTipText("Removes text links.");
		ignoreFormsCheck.setLayoutData(ignoreFormsCheckGridData);
		ignoreFormsCheck.setText("Ignore Forms");
		ignoreFormsCheck.setToolTipText("Removes forms.");
		ignoreInputCheck.setLayoutData(ignoreInputCheckGridData);
		ignoreInputCheck.setText("Ignore <INPUT> tags");
		ignoreButtonCheck.setLayoutData(ignoreButtonCheckGridData);
		ignoreButtonCheck.setText("Ignore <BUTTON> tags");
		ignoreSelectCheck.setLayoutData(ignoreSelectCheckGridData);
		ignoreSelectCheck.setText("Ignore <SELECT> tags");
		ignoreMetaCheck.setLayoutData(ignoreMetaCheckGridData);
		ignoreMetaCheck.setText("Ignore <META> tags");
		ignoreIframeCheck.setLayoutData(ignoreIframeCheckGridData);
		ignoreIframeCheck.setText("Ignore <IFRAME> tags");
		ignoreTableCellWidthsCheck.setLayoutData(ignoreTableCellWidthsCheckGridData);
		ignoreTableCellWidthsCheck.setText("Ignore Table Cell Widths");
		ignoreEmbedCheck.setLayoutData(ignoreEmbedCheckGridData);
		ignoreEmbedCheck.setText("Ignore <EMBED> tags");
		ignoreFlashCheck.setLayoutData(ignoreFlashCheckGridData);
		ignoreFlashCheck.setText("Ignore Flash");
		ignoreFlashCheck.setToolTipText("Removes Macromedia Flash Content");

		advancedTabItem.setText("Advanced Settings");
		advancedTabItem.setControl(advancedPanel);
		advancedPanel.setLayout(advancedPanelGridLayout);
		ignoreLinkListsCheck.setLayoutData(ignoreLinkListsCheckGridData);
		ignoreLinkListsCheck.setText("Ignore Link Lists");
		ignoreLLTextLinksCheck.setLayoutData(ignoreLLTextLinksCheckGridData);
		ignoreLLTextLinksCheck.setText("Text Links");
		ignoreLLTextLinksCheck.setEnabled(false);
		ignoreLLImageLinksCheck.setLayoutData(ignoreLLImageLinksCheckGridData);
		ignoreLLImageLinksCheck.setText("Image Links");
		ignoreLLImageLinksCheck.setEnabled(false);
		ignoreOnlyTextAndLinksCheck.setLayoutData(ignoreOnlyTextAndLinksCheckGridData);
		ignoreOnlyTextAndLinksCheck.setText("Ignore Only Text and Links");
		ignoreOnlyTextAndLinksCheck.setEnabled(false);
		linkTextRatioLabel.setLayoutData(linkTextRatioLabelGridData);
		linkTextRatioLabel.setText("Link/Text Removal Ratio");
		linkTextRatioLabel.setEnabled(false);
		linkTextRatio.setLayoutData(linkTextRatioGridData);
		linkTextRatio.setText("0.25");
		linkTextRatio.addFocusListener(new TextDoubleListener(0, Double.MAX_VALUE));
		linkTextRatio.setEnabled(false);
		jSeparator1.setEnabled(false);
		jSeparator1.setLayoutData(jSeparator1GridData);
		removeEmptyTablesCheck.setLayoutData(removeEmptyTablesCheckGridData);
		removeEmptyTablesCheck.setText("Remove Empty Tables");
		substanceLabel.setLayoutData(substanceLabelGridData);
		substanceLabel.setText("Tags to Consider as Substance:");
		substanceLabel.setEnabled(false);
		substanceImageCheck.setLayoutData(substanceImageCheckGridData);
		substanceImageCheck.setText("<IMG>");
		substanceImageCheck.setEnabled(false);
		substanceTextareaCheck.setLayoutData(substanceTextareaCheckGridData);
		substanceTextareaCheck.setText("<TEXTAREA>");
		substanceTextareaCheck.setEnabled(false);
		substanceLinksCheck.setLayoutData(substanceLinksCheckGridData);
		substanceLinksCheck.setText("<A>");
		substanceLinksCheck.setEnabled(false);
		substanceButtonCheck.setLayoutData(substanceButtonCheckGridData);
		substanceButtonCheck.setText("<BUTTON>");
		substanceButtonCheck.setEnabled(false);
		substanceInputCheck.setLayoutData(substanceInputCheckGridData);
		substanceInputCheck.setText("<INPUT>");
		substanceInputCheck.setEnabled(false);
		substanceFormCheck.setLayoutData(substanceFormCheckGridData);
		substanceFormCheck.setText("<FORM>");
		substanceFormCheck.setEnabled(false);
		substanceSelectCheck.setLayoutData(substanceSelectCheckGridData);
		substanceSelectCheck.setText("<SELECT>");
		substanceSelectCheck.setEnabled(false);
		substanceIFrameCheck.setLayoutData(substanceIFrameCheckGridData);
		substanceIFrameCheck.setText("<IFRAME>");
		substanceIFrameCheck.setEnabled(false);
		minimumTextLengthLabel.setLayoutData(minimumTextLengthLabelGridData);
		minimumTextLengthLabel.setAlignment(SWT.RIGHT);
		minimumTextLengthLabel.setText("Minimum Text Length");
		minimumTextLengthLabel.setEnabled(false);
		minimumTextLengthField.setLayoutData(minimumTextLengthFieldGridData);
		minimumTextLengthField.setText("1");
		minimumTextLengthField.setEnabled(false);
		minimumTextLengthField.addFocusListener(new TextIntegerListener(0, Integer.MAX_VALUE));

		outputTabItem.setText("Output Settings");
		outputTabItem.setControl(outputPanel);
		outputPanel.setLayout(outputPanelGridLayout);
		outputFormatPanel.setLayout(outputFormatPanelGridLayout);
		outputFormatPanel.setLayoutData(outputFormatPanelGridData);
		outputFormatPanel.setText("Output Format");
		htmlOutputButton.setLayoutData(htmlOutputButtonGridData);
		htmlOutputButton.setSelection(true);
		htmlOutputButton.setText("HTML only");
		htmlOutputButton.setToolTipText("Selects the output format as html.");
		buttonGroupOutput.add(htmlOutputButton);
		htmlOutputButton.setAlignment(SWT.CENTER);
		textOutputButton.setLayoutData(textOutputButtonGridData);
		textOutputButton.setText("Text only");
		textOutputButton.setToolTipText("Selects the output format as only text (no tags).");
		buttonGroupOutput.add(textOutputButton);
		textOutputButton.setAlignment(SWT.CENTER);
		htmlOutputPanel.setLayout(htmlOutputPanelGridLayout);
		htmlOutputPanel.setLayoutData(htmlOutputPanelGridData);
		htmlOutputPanel.setText("HTML Output Settings");
		appendLinksCheck.setLayoutData(appendLinksCheckGridData);
		appendLinksCheck.setText("Append Links to Bottom of Page");
		textOutputPanel.setLayout(textOutputPanelGridLayout);
		textOutputPanel.setLayoutData(textOutputPanelGridData);
		textOutputPanel.setText("Text Output Settings");
		limitLineBreaksCheck.setLayoutData(limitLineBreaksCheckGridData);
		limitLineBreaksCheck.setText("Limit number of line breaks");
		maxLineBreaksLabel.setLayoutData(maxLineBreaksLabelGridData);
		maxLineBreaksLabel.setText("Maximum number of line breaks");
		maxLineBreaksField.setLayoutData(maxLineBreaksFieldGridData);
		maxLineBreaksField.setTextLimit(5);
		maxLineBreaksField.setText("2");
		maxLineBreaksField.addFocusListener(new TextIntegerListener(0, Integer.MAX_VALUE));

		toolBar.setLayout(toolBarGridLayout);
		toolBar.setLayoutData(toolBarGridData);
		commitButton.setLayoutData(commitButtonGridData);
		commitButton.setText("Commit");
		revertButton.setLayoutData(revertButtonGridData);
		revertButton.setText("Revert");
		okButton.setLayoutData(okButtonGridData);
		okButton.setText("Ok");
		cancelButton.setLayoutData(cancelButtonGridData);
		cancelButton.setText("Cancel");

		mainShell.setLayout(new GridLayout());

		mainShell.addShellListener(new ShellAdapter() {
			public void shellClosed(ShellEvent evt) {
				mainShell_shellClosed(evt);
			}
		});

		commitButton.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				commitButton_widgetSelected(evt);
			}
		});
		revertButton.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				revertButton_widgetSelected(evt);
			}
		});
		okButton.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				okButton_widgetSelected(evt);
			}
		});

		cancelButton.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				cancelButton_widgetSelected(evt);
			}
		});

		ignoreScriptsCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		ignoreImagesCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		ignoreImageLinksCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		ignoreScriptsCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				ignoreMetaCheckActionPerformed(evt);
			}
		});

		displayImageLinkAltsCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		ignoreLinkListsCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		removeEmptyTablesCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		substanceImageCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		substanceLinksCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		substanceInputCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		substanceSelectCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		substanceIFrameCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		substanceFormCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		substanceButtonCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});
		substanceTextareaCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

		htmlOutputButton.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});
		textOutputButton.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});
		limitLineBreaksCheck.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(final SelectionEvent evt) {
				selectionEnabler(evt);
			}
		});

	} //GEN-END:initComponents

	protected void revertButton_widgetSelected(final SelectionEvent evt) {
		if (Crunch3.settings.isVerbose())
			System.out.println("revertButton_widgetSelected: " + evt);
		loadSettings();
	}

	protected void commitButton_widgetSelected(final SelectionEvent evt) {
		if (Crunch3.settings.isVerbose())
			System.out.println("commitButton_widgetSelected: " + evt);
		commitSettings();
	}

	protected void cancelButton_widgetSelected(final SelectionEvent evt) {
		if (Crunch3.settings.isVerbose())
			System.out.println("cancelButton_widgetSelected: " + evt);
		mainShell.dispose();
		self = null;
	}

	protected void okButton_widgetSelected(final SelectionEvent evt) {
		if (Crunch3.settings.isVerbose())
			System.out.println("okButton_widgetSelected: " + evt);
		commitSettings();
		if (Crunch3.settings.isVerbose())
			System.out.println("Content Extractor Settings Saved.");
		mainShell.dispose();
		self = null;
	}

	protected void mainShell_shellClosed(final ShellEvent evt) {
		mainShell.dispose();
		self = null;
	}

	//private void ignoreMetaCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoreMetaCheckActionPerformed
	private void ignoreMetaCheckActionPerformed(final SelectionEvent evt) { //GEN-FIRST:event_ignoreMetaCheckActionPerformed
		// Add your handling code here:
	} //GEN-LAST:event_ignoreMetaCheckActionPerformed

	//private void selectionEnabler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectionEnabler
	private void selectionEnabler(final SelectionEvent evt) { //GENT-FIRST:event_selectionEnabler
		if (Crunch3.settings.isVerbose())
			System.out.println("selectionEnabler: " + evt);

		// Check out what the source is
		Object source = evt.getSource();
		if (!evt.doit)
			return;

		if (source == ignoreScriptsCheck) {
			if (ignoreScriptsCheck.getSelection() == false)
				ignoreNoscriptCheck.setEnabled(false);
			else
				ignoreNoscriptCheck.setEnabled(true);
		} //if
		else if (source == ignoreLinkListsCheck) {
			if (ignoreLinkListsCheck.getSelection() == false) {
				ignoreLLTextLinksCheck.setEnabled(false);
				ignoreLLImageLinksCheck.setEnabled(false);
				ignoreOnlyTextAndLinksCheck.setEnabled(false);
				linkTextRatio.setEnabled(false);
				linkTextRatioLabel.setEnabled(false);
			} //if
			else {
				ignoreLLTextLinksCheck.setEnabled(true);
				ignoreLLImageLinksCheck.setEnabled(true);
				ignoreOnlyTextAndLinksCheck.setEnabled(true);
				linkTextRatio.setEnabled(true);
				linkTextRatioLabel.setEnabled(true);
			} //else
		} //else if
		else if (source == ignoreImagesCheck) {
			if (ignoreImagesCheck.getSelection() == false) {
				displayAltTagsCheck.setEnabled(false);
			} //if
			else {
				displayAltTagsCheck.setEnabled(true);
			}
		} else if (source == ignoreImageLinksCheck) {
			if (ignoreImageLinksCheck.getSelection() == false)
				displayImageLinkAltsCheck.setEnabled(false);
			else
				displayImageLinkAltsCheck.setEnabled(true);
		} else if (source == removeEmptyTablesCheck) {
			boolean b = removeEmptyTablesCheck.getSelection();
			substanceImageCheck.setEnabled(b);
			substanceLinksCheck.setEnabled(b);
			substanceInputCheck.setEnabled(b);
			substanceSelectCheck.setEnabled(b);
			substanceTextareaCheck.setEnabled(b);
			substanceButtonCheck.setEnabled(b);
			substanceFormCheck.setEnabled(b);
			substanceIFrameCheck.setEnabled(b);
			substanceLabel.setEnabled(b);
			minimumTextLengthLabel.setEnabled(b);
			minimumTextLengthField.setEnabled(b);
		} //else if
		else if (source == limitLineBreaksCheck) {
			boolean b = limitLineBreaksCheck.getSelection();
			maxLineBreaksLabel.setEnabled(b && textOutputPanel.getEnabled());
			maxLineBreaksField.setEnabled(b && textOutputPanel.getEnabled());
		} else if (source == htmlOutputButton || source == textOutputButton) {
			boolean b = htmlOutputButton.getSelection();
			htmlOutputPanel.setEnabled(b);
			appendLinksCheck.setEnabled(b);
			textOutputPanel.setEnabled(!b);
			limitLineBreaksCheck.setEnabled(!b);
			maxLineBreaksLabel.setEnabled(!b && limitLineBreaksCheck.getSelection());
			maxLineBreaksField.setEnabled(!b && limitLineBreaksCheck.getSelection());
		} else {
			if (Crunch3.settings.isVerbose())
				System.out.println("selectionEnabler Error: widget not recognized" + source);
		}
	} //GEN-LAST:event_selectionEnabler

	/**
	 * Reloads settings GUI
	 * 
	 * @param iFilter
	 *            the ContentExtractor
	 */
	public void reload(final ContentExtractorSettings iFilter) {
		mFilter = iFilter;
		loadSettings();
	}

	/**
	 * Loads the settings from the ContentExtractor by using accessor methods
	 */
	public void loadSettings() {
		//Use do click to run listeners and setSelected to just set things

		ignoreAdsCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_ADS).equals("true"));
		{
			ignoreScriptsCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_SCRIPTS).equals("true"));
			Event event = new Event();
			event.doit = true;
			event.item = event.widget = ignoreScriptsCheck;
			SelectionEvent se = new SelectionEvent(event) {
				public Object getSource() {
					return ignoreScriptsCheck;
				}
			};
			selectionEnabler(se);
		}
		ignoreNoscriptCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_NOSCRIPT_TAGS).equals("true"));
		ignoreExternalStylesheetsCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_EXTERNAL_STYLESHEETS).equals("true"));
		ignoreStylesCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_STYLES).equals("true"));
		ignoreStyleAttributesCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_STYLE_ATTRIBUTES).equals("true"));
		ignoreStyleInDivCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_DIV_STYLES).equals("true"));
		{
			ignoreImagesCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_IMAGES).equals("true"));
			Event event = new Event();
			event.doit = true;
			event.item = event.widget = ignoreImagesCheck;
			SelectionEvent se = new SelectionEvent(event) {
				public Object getSource() {
					return ignoreImagesCheck;
				}
			};
			selectionEnabler(se);
		}
		displayAltTagsCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.DISPLAY_IMAGE_ALTS).equals("true"));
		{
			ignoreImageLinksCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_IMAGE_LINKS).equals("true"));
			Event event = new Event();
			event.doit = true;
			event.item = event.widget = ignoreImageLinksCheck;
			SelectionEvent se = new SelectionEvent(event) {
				public Object getSource() {
					return ignoreImageLinksCheck;
				}
			};
			selectionEnabler(se);
		}
		displayImageLinkAltsCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.DISPLAY_IMAGE_LINK_ALTS).equals("true"));
		ignoreTextLinksCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_TEXT_LINKS).equals("true"));
		ignoreFormsCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_FORMS).equals("true"));
		ignoreInputCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_INPUT_TAGS).equals("true"));
		ignoreButtonCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_BUTTON_TAGS).equals("true"));
		ignoreSelectCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_SELECT_TAGS).equals("true"));
		ignoreMetaCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_META).equals("true"));
		ignoreIframeCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_IFRAME_TAGS).equals("true"));
		ignoreTableCellWidthsCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_CELL_WIDTH).equals("true"));
		ignoreEmbedCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_EMBED_TAGS).equals("true"));
		ignoreFlashCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_FLASH).equals("true"));

		{
			ignoreLinkListsCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.IGNORE_LINK_CELLS).equals("true"));
			Event event = new Event();
			event.doit = true;
			event.item = event.widget = ignoreLinkListsCheck;
			SelectionEvent se = new SelectionEvent(event) {
				public Object getSource() {
					return ignoreLinkListsCheck;
				}
			};
			selectionEnabler(se);
		}
		ignoreLLTextLinksCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.LC_IGNORE_TEXT_LINKS).equals("true"));
		ignoreLLImageLinksCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.LC_IGNORE_IMAGE_LINKS).equals("true"));
		ignoreOnlyTextAndLinksCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.LC_ONLY_LINKS_AND_TEXT).equals("true"));
		linkTextRatio.setText(mFilter.getSetting(ContentExtractorConstants.LINK_TEXT_REMOVAL_RATIO));
		{
			removeEmptyTablesCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.REMOVE_EMPTY_TABLES).equals("true"));
			Event event = new Event();
			event.doit = true;
			event.item = event.widget = removeEmptyTablesCheck;
			SelectionEvent se = new SelectionEvent(event) {
				public Object getSource() {
					return removeEmptyTablesCheck;
				}
			};
			selectionEnabler(se);
		}
		substanceImageCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.SUBSTANCE_IMAGE).equals("true"));
		substanceTextareaCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.SUBSTANCE_TEXTAREA).equals("true"));
		substanceLinksCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.SUBSTANCE_LINKS).equals("true"));
		substanceButtonCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.SUBSTANCE_BUTTON).equals("true"));
		substanceInputCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.SUBSTANCE_INPUT).equals("true"));
		substanceFormCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.SUBSTANCE_FORM).equals("true"));
		substanceSelectCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.SUBSTANCE_SELECT).equals("true"));
		substanceIFrameCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.SUBSTANCE_IFRAME).equals("true"));
		minimumTextLengthField.setText(mFilter.getSetting(ContentExtractorConstants.SUBSTANCE_MIN_TEXT_LENGTH));

		{
			htmlOutputButton.setSelection(!mFilter.getSetting(ContentExtractorConstants.ONLY_TEXT).equals("true"));
			textOutputButton.setSelection(mFilter.getSetting(ContentExtractorConstants.ONLY_TEXT).equals("true"));
			Event event = new Event();
			event.doit = true;
			event.item = event.widget = htmlOutputButton;
			SelectionEvent se = new SelectionEvent(event) {
				public Object getSource() {
					return htmlOutputButton;
				}
			};
			selectionEnabler(se);
			event.doit = true;
			event.item = event.widget = textOutputButton;
			se = new SelectionEvent(event) {
				public Object getSource() {
					return textOutputButton;
				}
			};
			selectionEnabler(se);
		}
		appendLinksCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.ADD_LINKS_TO_BOTTOM).equals("true"));
		{
			limitLineBreaksCheck.setSelection(mFilter.getSetting(ContentExtractorConstants.LIMIT_LINEBREAKS).equals("true"));
			Event event = new Event();
			event.doit = true;
			event.item = event.widget = limitLineBreaksCheck;
			SelectionEvent se = new SelectionEvent(event) {
				public Object getSource() {
					return limitLineBreaksCheck;
				}
			};
			selectionEnabler(se);
		}
		maxLineBreaksField.setText(mFilter.getSetting(ContentExtractorConstants.MAX_LINEBREAKS));
	}

	/**
	 * Commits the settings so that the ContentExtractor reflects the user's specifications.
	 */
	public void commitSettings() {
		mFilter.changeSetting(ContentExtractorConstants.ONLY_TEXT, Boolean.toString(textOutputButton.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_ADS, Boolean.toString(ignoreAdsCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_BUTTON_TAGS, Boolean.toString(ignoreButtonCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_FORMS, Boolean.toString(ignoreFormsCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_IFRAME_TAGS, Boolean.toString(ignoreIframeCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_IMAGE_LINKS, Boolean.toString(ignoreImageLinksCheck.getSelection()));
		if (ignoreImageLinksCheck.getSelection())
			mFilter.changeSetting(ContentExtractorConstants.DISPLAY_IMAGE_LINK_ALTS, Boolean.toString(displayImageLinkAltsCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_TEXT_LINKS, Boolean.toString(ignoreTextLinksCheck.getSelection()));

		if (ignoreImagesCheck.getSelection()) {
			mFilter.changeSetting(ContentExtractorConstants.DISPLAY_IMAGE_ALTS, Boolean.toString(displayAltTagsCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.IGNORE_IMAGES, Boolean.toString(ignoreImagesCheck.getSelection()));
		} else
			mFilter.changeSetting(ContentExtractorConstants.IGNORE_IMAGES, Boolean.toString(ignoreImagesCheck.getSelection()));

		mFilter.changeSetting(ContentExtractorConstants.IGNORE_INPUT_TAGS, Boolean.toString(ignoreInputCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_LINK_CELLS, Boolean.toString(ignoreLinkListsCheck.getSelection()));

		if (ignoreLinkListsCheck.getSelection()) {
			mFilter.changeSetting(ContentExtractorConstants.LC_IGNORE_IMAGE_LINKS, Boolean.toString(ignoreLLImageLinksCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.LC_IGNORE_TEXT_LINKS, Boolean.toString(ignoreLLTextLinksCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.LINK_TEXT_REMOVAL_RATIO, linkTextRatio.getText());
			mFilter.changeSetting(ContentExtractorConstants.LC_ONLY_LINKS_AND_TEXT, Boolean.toString(ignoreOnlyTextAndLinksCheck.getSelection()));
		}

		mFilter.changeSetting(ContentExtractorConstants.IGNORE_META, Boolean.toString(ignoreMetaCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_SCRIPTS, Boolean.toString(ignoreScriptsCheck.getSelection()));

		if (ignoreNoscriptCheck.getSelection())
			mFilter.changeSetting(ContentExtractorConstants.IGNORE_NOSCRIPT_TAGS, Boolean.toString(ignoreNoscriptCheck.getSelection()));

		mFilter.changeSetting(ContentExtractorConstants.IGNORE_SELECT_TAGS, Boolean.toString(ignoreSelectCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_EXTERNAL_STYLESHEETS, Boolean.toString(ignoreExternalStylesheetsCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_DIV_STYLES, Boolean.toString(ignoreStyleInDivCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_STYLE_ATTRIBUTES, Boolean.toString(ignoreStyleAttributesCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_STYLES, Boolean.toString(ignoreStylesCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_CELL_WIDTH, Boolean.toString(ignoreTableCellWidthsCheck.getSelection()));

		if (removeEmptyTablesCheck.getSelection()) {
			mFilter.changeSetting(ContentExtractorConstants.REMOVE_EMPTY_TABLES, Boolean.toString(removeEmptyTablesCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.SUBSTANCE_BUTTON, Boolean.toString(substanceButtonCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.SUBSTANCE_FORM, Boolean.toString(substanceFormCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.SUBSTANCE_IFRAME, Boolean.toString(substanceIFrameCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.SUBSTANCE_IMAGE, Boolean.toString(substanceImageCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.SUBSTANCE_INPUT, Boolean.toString(substanceInputCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.SUBSTANCE_LINKS, Boolean.toString(substanceLinksCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.SUBSTANCE_SELECT, Boolean.toString(substanceSelectCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.SUBSTANCE_TEXTAREA, Boolean.toString(substanceTextareaCheck.getSelection()));
			mFilter.changeSetting(ContentExtractorConstants.SUBSTANCE_MIN_TEXT_LENGTH, minimumTextLengthField.getText());
		} //if
		else
			mFilter.changeSetting(ContentExtractorConstants.REMOVE_EMPTY_TABLES, Boolean.toString(removeEmptyTablesCheck.getSelection()));

		mFilter.changeSetting(ContentExtractorConstants.IGNORE_EMBED_TAGS, Boolean.toString(ignoreEmbedCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.IGNORE_FLASH, Boolean.toString(ignoreFlashCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.ADD_LINKS_TO_BOTTOM, Boolean.toString(appendLinksCheck.getSelection()));
		mFilter.changeSetting(ContentExtractorConstants.LIMIT_LINEBREAKS, Boolean.toString(limitLineBreaksCheck.getSelection()));
		if (limitLineBreaksCheck.getSelection())
			mFilter.changeSetting(ContentExtractorConstants.MAX_LINEBREAKS, maxLineBreaksField.getText());

		mFilter.saveSettings();
	}

	public void revertSettings() {
		loadSettings();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private Button ignoreLinkListsCheck;
	private Button substanceImageCheck;
	private Sash jSeparator1;
	private Text maxLineBreaksField;
	private Button substanceInputCheck;
	private Button ignoreNoscriptCheck;
	private Label maxLineBreaksLabel;
	private Button substanceButtonCheck;
	private Label substanceLabel;
	private Button textOutputButton;
	private Button substanceLinksCheck;
	private Button substanceTextareaCheck;
	private Button htmlOutputButton;
	private Button substanceSelectCheck;
	private Button ignoreOnlyTextAndLinksCheck;
	private Text minimumTextLengthField;
	private Button ignoreImageLinksCheck;
	private Button ignoreLLImageLinksCheck;
	private Group htmlOutputPanel;
	private Button substanceIFrameCheck;
	private Label minimumTextLengthLabel;
	private TabItem ignoreTabItem;
	private Composite ignorePanel;
	private Button ignoreScriptsCheck;
	private Button ignoreMetaCheck;
	private Button ignoreInputCheck;
	private Label linkTextRatioLabel;
	private ButtonGroup buttonGroupOutput;
	private Button ignoreTextLinksCheck;
	private Button ignoreLLTextLinksCheck;
	private Button limitLineBreaksCheck;
	private Button ignoreButtonCheck;
	private TabFolder settingsTabs;
	private Button ignoreImagesCheck;
	private Button ignoreSelectCheck;
	private Button removeEmptyTablesCheck;
	private Button displayImageLinkAltsCheck;
	private Button ignoreAdsCheck;
	private Button displayAltTagsCheck;
	private Button ignoreEmbedCheck;
	private Button ignoreFlashCheck;
	private Button ignoreTableCellWidthsCheck;
	private Group cssGroup;
	private Button ignoreExternalStylesheetsCheck;
	private Button ignoreStyleInDivCheck;
	private Button ignoreStyleAttributesCheck;
	private Group textOutputPanel;
	private Button ignoreStylesCheck;
	private Button substanceFormCheck;
	private Button ignoreIframeCheck;
	private Group outputFormatPanel;
	private Button ignoreFormsCheck;
	private Button appendLinksCheck;
	private Text linkTextRatio;
	private TabItem outputTabItem;
	private Composite outputPanel;
	private TabItem advancedTabItem;
	private Composite advancedPanel;
	private Shell mainShell;
	private ToolBar toolBar;
	private Button commitButton;
	private Button revertButton;
	private Button okButton;
	private Button cancelButton;
	// End of variables declaration//GEN-END:variables

	/*
	 * (non-Javadoc)
	 * 
	 * @see psl.crunch3.plugins.ProxyFilterSettings#set(java.lang.String, java.lang.String)
	 */
	public void set(final String key, final String value) {
		mFilter.changeSetting(key, value);
		revertSettings();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see psl.crunch3.plugins.ProxyFilterSettings#get(java.lang.String)
	 */
	public String get(final String key) {
		return mFilter.getSetting(key);
	}

}
